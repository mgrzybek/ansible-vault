---

- name: Kernel capabilities
  when:
    - install_vault | lower == 'true'
  command: setcap cap_ipc_lock=+ep /usr/local/bin/vault

- name: Sysconfig
  template: src=vault.sysconfig.j2 dest={{ vault_sysconfig }}
  notify: restart vault

- name: Vault main configuration file
  template: src=vault.hcl.j2 dest=/etc/vault.d/vault.hcl
  notify: restart vault

#- name: Telegraf configuration
#  template: src=vault.telegraf.conf.j2 dest=/etc/telegraf/telegraf.d/vault.conf
#  notify: restart telegraf
#  when: vault_config_telegraf == true

#- name: Auto-complÃ©tion
#  become: no
#  command: vault -autocomplete-install
#  register: vault_autocomplete

- name: Consul monitoring
  when:
    - configure_consul_vault_ui | lower == 'true'
  template: src=service.consul.json.j2 dest={{ vault_consul_services_path }}/{{ item.service.name }}.json
  with_items: "{{ vault_vault_ui }}"
  notify: reload consul

# TODO: [WARN]  no `api_addr` value specified in config or in VAULT_API_ADDR; falling back to detection if possible, but this value should be manually set
# TODO: [INFO]  core: seal configuration missing, not initialized
# TODO: https://shapeshed.com/hashicorp-vault-ldap/

- name: Flush handlers before post configuration
  meta: flush_handlers

- name: Vault post configuration
  run_once: true
  block:
    - name: Init vault
      command: consul lock vault_init vault operator init -key-shares=3 -key-threshold=2 -format=json
      register: vault_init_result

    - name: Set init facts
      set_fact: vault_init="{{ vault_init_result.stdout | from_json }}"

    - debug: msg="{{ vault_init.unseal_keys_hex }}"

    - name: Unseal vault
      command: consul lock vault_init vault operator unseal {{ item }}
      with_items: "{{ vault_init.unseal_keys_hex }}"

    # Auth configuration
    # TODO: write a generic key,value loop
    - name: Enable LDAP auth engine
      when: vault_auth_ldap | length > 0
      with_items: "{{ vault_auth_ldap }}"
      environment:
        VAULT_TOKEN: "{{ vault_init.root_token }}"
        VAULT_ADDR: "{{ vault_addr }}"
      shell: >
          vault auth enable \
              -path={{ item.name }} \
              {% if item.description is defined %}
              -description="{{ item.description }}" \
              {% endif %}
              ldap

    - name: Configure LDAP auth engine
      when: vault_auth_ldap | length > 0
      with_items: "{{ vault_auth_ldap }}"
      environment:
        VAULT_TOKEN: "{{ vault_init.root_token }}"
        VAULT_ADDR: "{{ vault_addr }}"
      shell: >
          consul lock vault_auth_config \
              vault write auth/{{ item.name }}/config \
                  url="{{ item.url }}" \
                  binddn="{{ item.binddn }}" \
                  {% if item.bindpass is defined and item.bindpass | length > 0 %}
                  bindpass="{{ item.bindpass }}" \
                  {% endif %}
                  userdn="{{ item.userdn }}" \
                  userattr="{{ item.userattr }}" \
                  {% if item.groupfilter is defined and item.groupfilter | length > 0 %}
                  groupfilter="{{ item.groupfilter }}" \
                  groupdn="{{ item.groupdn }}" \
                  groupattr="{{ item.groupattr }}"
                  {% endif %}

    - name: Configure database secret engine
      when: vault_secrets_engine_databases | length > 0
      block:
          - name: Create script
            template: src=vault_database_engine.sh.j2 dest=/dev/shm/vault_database_engine.sh

          - name: Run script
            shell: VAULT_TOKEN={{ vault_token }} VAULT_ADDR={{ vault_addr }} lock vault_database_engine sh /dev/shm/vault_database_engine.sh

          - name: Cleanup script
            file: path=/dev/shm/vault_database_engine.sh state=absent

# TODO: set a local fact in pre_install to manage this
- name: Create an env file containing the token
  when:
    - vault_token_create_env_file | lower == 'true'
  block:
    - name: Create .vault.env
      file:
        path: "{{ lookup('env', 'HOME') }}/.vault.env"
        state: touch

    - name: Create an env file containing the token
      lineinfile:
        path: "{{ lookup('env', 'HOME') }}/.vault.env"
        state: present
        regexp: "^$"
        line: "VAULT_TOKEN={{ vault_init.root_token }}"

    - name: Store the bootstrap token into consul
      when: vault_token_store_consul_kv | lower == 'true'
      command: consul kv put vault/root_token {{ vault_init.root_token }}
